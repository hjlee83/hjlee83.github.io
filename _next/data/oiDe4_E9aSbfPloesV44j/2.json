{"pageProps":{"post":{"id":"2","title":"@NotNull vs @NotEmpty vs @NotBlank","description":"@NotNull, @NotEmpty, @NotBlank 를 언제 사용해야하는지 설명합니다.","date":"2021. 01. 11.","category":["Bean Validation","Spring","Java"],"content":"<h2>시작하면서</h2>\n<p>spring 을 하면서 validation 에 대해 얘기해보려합니다.</p>\n<p>웹 서비스를 만들면서 다양하게 검증을 사용할 일이 생깁니다.</p>\n<p>웹프로그램을 만들다보면 프리젠테이션 계층부터 지속성 계층까지 반복적인 유효성검사는 코드의 품질을 떨어뜨리고 오류발생을 높입니다.\n그래서  <a href=\"https://jcp.org/en/jsr/detail?id=303\">JSR-303</a> 이 나왔습니다.</p>\n<p>그리고 자바 8이 나오고나서 자바8에 맞추어 bean validation 2.0 에 맞게 <a href=\"https://jcp.org/en/jsr/detail?id=380\">JSR-380</a> 이 나왔습니다.</p>\n<blockquote>\n<p>JSR 은 자바스펙요구서 (Java Specification Request)</p>\n</blockquote>\n<p>이런 Bean Validation 을 사용하면 쉽게 검증을 적용할수 있습니다.</p>\n<p>하지만 그동안 코드리뷰를 하면서 NotNull, NotEmpty 그리고 NotBlank 를 혼용하는 분들을 종종 발견하곤 합니다.</p>\n<p>그래서 해당 내용을 정리하려합니다.</p>\n<h2>@NotNull</h2>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">.</span>validation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebDataBinder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InitBinder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidationApplication</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@InitBinder</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebDataBinder</span> binder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        binder<span class=\"token punctuation\">.</span><span class=\"token function\">initDirectFieldAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValidationApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">helloName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloRequest</span> helloRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> helloRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRequest</span> <span class=\"token punctuation\">{</span>\n\n       <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕 %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>/hello 을 호출하게 되면 \"안녕 이름\" 이 호출되는 간단한 컨트롤러입니다.</p>\n<blockquote>\n<p>request 에 setter 를 안넣는 방법은 조졸두님 <a href=\"https://jojoldu.tistory.com/407\">블로그</a> 를 참고해주세요.</p>\n</blockquote>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DisplayName</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebMvcTest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultActions</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcRequestBuilders</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultMatchers</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultMatchers</span><span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@WebMvcTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">MockMvc</span> mvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello 컨트롤러가 잘 되는지 확인\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">helloTest1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">ResultActions</span> resultActions <span class=\"token operator\">=</span> mvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        resultActions\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕 null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>테스트 코드입니다.<br>\n테스트는 통과과 되겠지만 결과 데이터는 안녕 null 입니다.<br>\nname 이 null 이 되면 안될것 같습니다.</p>\n<p>코드를 고쳐보겠습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRequest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@NotNull</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"이름은 빈값일 수 없습니다.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (1)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>(1) HelloRequest 에 @NotNull 을 추가합니다.</p>\n<p>다시 수행하면 예상과 달리 또 통과가 되는데요.<br>\n이유는 validation 어노테이션을 체크할수 있는 장치가 추가로 필요하기 때문입니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidationApplication</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// ...</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">helloName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Valid</span> <span class=\"token class-name\">HelloRequest</span> helloRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// (1)</span>\n\n        <span class=\"token keyword\">return</span> helloRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>(1) @Valid 어노테이션을 추가하였습니다.</p>\n<p>다시 수행하면 예상처럼 테스트가 실패가 됩니다.<br>\n테스트를 성공시키도록 수정해보겠습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DisplayName</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebMvcTest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MvcResult</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultActions</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BindException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>assertj<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span>assertThat<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>assertj<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span>tuple<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcRequestBuilders</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultMatchers</span><span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@WebMvcTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloControllerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// ...</span>\n    \n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello 컨트롤러에 파라미터를 전달 안하면 name validation 이 작동한다\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (1)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">helloTest1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">ResultActions</span> resultActions <span class=\"token operator\">=</span> mvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token class-name\">MvcResult</span> mvcResult <span class=\"token operator\">=</span> resultActions\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBadRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BindException</span><span class=\"token punctuation\">)</span> mvcResult<span class=\"token punctuation\">.</span><span class=\"token function\">getResolvedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBindingResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFieldErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (2)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">extracting</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"defaultMessage\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">containsExactlyInAnyOrder</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token function\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"이름은 빈값일 수 없습니다.\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>(1) 테스트 이름을 변경합니다.<br>\n(2) 바인딩 에러를 잡아서 검증합니다.</p>\n<p>이제 통과를 할것입니다.<br>\n우리가 원하던대로 null 을 막았습니다.</p>\n<p>name 에 빈값이 들어가면 어떻게 될까요?<br>\n저는 빈값도 예외가 나오길 원합니다.</p>\n<p>테스트를 추가해보겠습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebMvcTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloControllerTest</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// ...</span>\n    \n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello 컨트롤러에 name 값을 빈값으로 전달하면 name validation 이 작동한다\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">helloTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">ResultActions</span> resultActions <span class=\"token operator\">=</span> mvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (1)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token class-name\">MvcResult</span> mvcResult <span class=\"token operator\">=</span> resultActions\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBadRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BindException</span><span class=\"token punctuation\">)</span> mvcResult<span class=\"token punctuation\">.</span><span class=\"token function\">getResolvedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBindingResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFieldErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">extracting</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"defaultMessage\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">containsExactlyInAnyOrder</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token function\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"이름은 빈값일 수 없습니다.\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>(1) 먼저 작성한 테스트와 동일하지만 파라미터로 name 이 추가되었습니다.</p>\n<p>다시 수행하면 예상과 다르게 status 가 isOk 가 되면서 테스트가 실패하게 됩니다. 우리는 @NotNull 을 넣었는데 왜 통과가 되는것일까요?</p>\n<p>NotNull 의 javaDoc 을 보면</p>\n<blockquote>\n<p>The annotated element must not be null. Accepts any type.</p>\n</blockquote>\n<p>이렇게 되어있습니다.<br>\nnull 만 체크하는용도입니다.</p>\n<h2>NotBlank</h2>\n<p>코드를 수정해보겠습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRequest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"이름은 빈값일 수 없습니다.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (1)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕 %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>(1) @NotBlank 로 변경해보겠습니다.</p>\n<p>테스트를 재수행해보면 통과하는것을 알 수 있습니다.</p>\n<p>NotBlank 의 javaDoc 을 보면</p>\n<blockquote>\n<p>The annotated element must not be null and must contain at least one non-whitespace character.<br>\nAccepts CharSequence.</p>\n</blockquote>\n<p>이렇게 되어있습니다.<br>\nNotBlank 는 null 과 빈문자열을 체크하네요.</p>\n<h2>NotEmpty</h2>\n<p>그동안 api 는 안녕 철수. 안녕 영희 같이 한명을 대상으로 했습니다.</p>\n<p>근데 저는 안녕 철수, 영희 처럼 2명을 대상으로 하고 싶어졌습니다.</p>\n<p>아래처럼 변경해보죠.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRequest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"이름은 빈값일 수 없습니다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (1)</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕 %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>리스트로 변경해봅니다.<br>\n테스트를 재수행하면 아래와 같은 오류를 내뿜으면서 다 깨집니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">No validator could be found for constraint &#x26;#39;javax.validation.constraints.NotBlank&#x26;#39; validating type &#x26;#39;java.util.List&#x26;lt;java.lang.String&#x26;gt;&#x26;#39;. Check configuration for &#x26;#39;name&#x26;#39;</code></pre></div>\n<p>NotBlank 를 List 에 쓸수 없다 라고 나오네요.</p>\n<p>다시 코드를 변경해보겠습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRequest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@NotNull</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"이름은 빈값일 수 없습니다.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (1)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕 %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>(1) NotNull 로 다시 변경했습니다.</p>\n<p>테스트를 재수행하니 helloTest1은 통과되고 helloTest2는 isOk를 내보내면서 실패했네요.</p>\n<p>@NotNull 로는 빈배열을 체크할수 없습니다.</p>\n<p>코드를 수정해보겠습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRequest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@NotEmpty</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"이름은 빈값일 수 없습니다.\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (1) </span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>(1) NotEmpty 로 변경했습니다.</p>\n<p>테스트를 재수행하니 통과되었습니다.</p>\n<p>NotEmpty 의 javaDoc 을 보면</p>\n<blockquote>\n<p>The annotated element must not be null nor empty.<br>\nSupported types are:<br>\nCharSequence (length of character sequence is evaluated)<br>\nCollection (collection size is evaluated)<br>\nMap (map size is evaluated)<br>\nArray (array length is evaluated)</p>\n</blockquote>\n<p>이렇게 되어있습니다.<br>\nNotEmpty 는 null 과 비어있는지 체크를 합니다.</p>\n<h2>결론</h2>\n<p>검증하려는 필드가 List 인가?</p>\n<p>yes → @NotEmpty</p>\n<p>no → 아래문항으로</p>\n<p>검증하려는 필드가 String 인가?</p>\n<p>yes → @NotBlank</p>\n<p>no → @NotNull</p>\n<p>읽어주셔서 감사합니다.</p>\n"}},"__N_SSG":true}