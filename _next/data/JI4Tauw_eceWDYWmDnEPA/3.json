{"pageProps":{"post":{"id":"3","title":"클래스 만들때 빌더 vs 정적 팩토리 메서드","description":"클래스를 만들떄 빌더와 정적 팩토리 메서드 어떤걸 사용하시나요? 제 생각을 얘기해보겠습니다.","date":"2021. 01. 18.","category":["Java","Lombok"],"content":"<h2>시작하면서</h2>\n<p>몇일전 아는 동생에게서 아래와 같은 질문이 들어왔습니다.</p>\n<p><img src=\"/assets/3/img_1.jpg\" alt=\"img\">\n그래서 동생한테 제 기준을 설명했는데 이 설명한 내용을 블로그에 써보도록 하겠습니다.</p>\n<p>일반적으로 클래스를 이용해서 객체를 만들때는 생성자를 사용합니다.</p>\n<p>그 외에 방법으로 자주 쓰이는 빌더와 정적팩토리메서드를 저는 언제 사용하는지 설명드리도록 하겠습니다.</p>\n<h2>빌더</h2>\n<blockquote>\n<p>effective java 규칙2<br>\n생성자 인자가 많을때는 Builder 패턴 적용을 고려하라</p>\n</blockquote>\n<p>저는 정산시스템을 개발하다보니 금액을 나타내는 필드를 여러개 사용하고 있습니다.<br>\n그러다보니 하나의 클래스에 여러개의 금액필드를 생성자로 넣게 되는 경우가 많아집니다.<br>\n아래와 같이 말이죠.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Settle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> d<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Settle</span><span class=\"token punctuation\">(</span><span class=\"token number\">100_000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10_000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200_000L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100_000L</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>여기에는 몇개의 문제가 있습니다.</p>\n<ol>\n<li>new Settle 을 호출한 부분에서 필드들의 타입이 같으니 어떤 필드가 뭘 의미하는지 쉽게 알수 없습니다.</li>\n<li>불필요한 필드가 있을시 null 을 넣거나 새로 생성자를 만들어야합니다.</li>\n<li>필드가 추가 된다면 생성자를 호출하는 모든 클래스를 수정하거나 필드가 변경된 생성자를 하나 더 만들어야합니다.</li>\n</ol>\n<p>이러한 문제들을 빌더를 사용하면 싹 해결이 됩니다.</p>\n<p>저는 몇년전까지만 해도 빌더를 사용하지 않았습니다.<br>\n이유는 빌더객체를 만드는데 오버헤드가 컸고 그동안 만들었던 것들은 필드가 그렇게 많지 않았기때문이였습니다.</p>\n<p>지금은 필드가 많던 적던 빌더를 자주 사용하는 편입니다.<br>\n이유는 Lombok 을 사용하면 빌더를 편하게 만들수 있기 때문입니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Settle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Builder</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> d<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Settle</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">10_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token class-name\">Settle</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">10_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">200_000L</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>저를 비롯한 팀에서는 클래스에 빌더를 선언하지 않고 생성자에 선언합니다.<br>\n이유로는 저희는 테스트에서 사용하는 테스트 빌더<br>\n그리고 프로덕트에서 사용하는 빌더 2종류를 만들어서 사용하기 때문입니다.</p>\n<blockquote>\n<p>클래스에 빌더를 작성하면 암묵적으로 @AllArgsConstructor private 로 생성</p>\n</blockquote>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Settle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Builder</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Builder</span><span class=\"token punctuation\">(</span>builderClassName<span class=\"token operator\">=</span><span class=\"token string\">\"TestBuilder\"</span><span class=\"token punctuation\">,</span> builderMethodName<span class=\"token operator\">=</span><span class=\"token string\">\"testBuilder\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Settle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> d<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Settle</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">10_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token class-name\">Settle</span><span class=\"token punctuation\">.</span><span class=\"token function\">testBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">10_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">200_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>테스트빌더와 프로덕트빌더를 따로 만든 이유는 빌더라고 해서 모든 필드에 열려있으면<br>\n실제 프로덕트에서 하는 일들이 뭔지 알기 쉽지가 않습니다.<br>\n그래서 최소한의 필드로 열어두고 필요할때마다 필드를 추가하는 방식을 사용합니다.</p>\n<h2>정적 팩토리 메서드</h2>\n<blockquote>\n<p>effective java 규칙1<br>\n생성자 대신 정적 팩토리 메서드를 사용할 수 없는지 생각해 보라.</p>\n</blockquote>\n<p>생성자로만 그리고 빌더로만 사용하기에는 아쉬울때가 있습니다.<br>\n저는 외부에서 호출하는것들에는 최소한의 인자만 사용하는게 좋다고 생각합니다.</p>\n<p>예를 들면 아래와 같은 클래스가 있다고 합시다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderStatus</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> orderDate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> orderNo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> price<span class=\"token punctuation\">;</span>\n            \n    <span class=\"token comment\">// 생성자 생략</span>\n    <span class=\"token comment\">// 빌더 생략</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token punctuation\">{</span>\n        PAY<span class=\"token punctuation\">,</span>\n        DELIVERY<span class=\"token punctuation\">,</span>\n        DONE<span class=\"token punctuation\">,</span>\n        CANCEL<span class=\"token punctuation\">,</span>\n        RETURN\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>외부에서 아래와 같이 사용할수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span>PAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20210118001\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span>CANCEL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20210118001\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 혹은</span>\n<span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>PAY<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderNo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"20210118001\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>CANCEL<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderNo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"20210118001\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>생성자든 빌더든 정확한 의도를 알기가 쉽지 않습니다.<br>\n물론 빌더의 이름을 넣을순 있겠지만 매번 비슷한 필드로 생성자를 만들려면<br>\n인자 순서를 변경하는 꼼수를 부릴수 밖에 없습니다.<br>\n그리고 클래스 내부에 있는 enum 을 호출하는곳에서 사용하려면 Order.OrderStatus.PAY 같이 작성해야합니다.</p>\n<p>이때 정적팩토리 메서드를 사용해주면 아래와 같이 변경할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderStatus</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> orderDate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> orderNo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> price<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 빌더 여기 예제에서는 빌더 accessLevel 도 PRIVATE 하게 가능</span>\n    \n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">payOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span> orderDate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> orderNo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>PAY<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orderDate</span><span class=\"token punctuation\">(</span>orderDate<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orderNo</span><span class=\"token punctuation\">(</span>orderNo<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">cancelOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span> cancelDate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>CANCEL<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orderDate</span><span class=\"token punctuation\">(</span>cancelDate<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orderNo</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>orderNo<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token punctuation\">{</span>\n        PAY<span class=\"token punctuation\">,</span>\n        DELIVERY<span class=\"token punctuation\">,</span>\n        DONE<span class=\"token punctuation\">,</span>\n        CANCEL<span class=\"token punctuation\">,</span>\n        RETURN\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>외부에서 아래와 같이 사용할수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token function\">payOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20210118001\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelOf</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>조금 더 이름으로 확연히 구분이 되고 enum 과 builder를 외부에 노출을 안시킬 수 있습니다.</p>\n<p>또한 변경불가능한 객체를 재사용하는 용도로 사용가능합니다.<br>\n예를 들면 외부에 빈컬렉션을 제공할시</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>위에 대신 밑에를 사용함으로써 객체를 새로 생성 안하고 재사용이 가능합니다.<br>\n이걸 이용해서 다른 객체들도 재사용가능하게 만들수 있습니다. (중요한건 불변객체여야합니다.)</p>\n<h2>둘중에 뭘 써야하나?</h2>\n<p>전 둘다 사용하고 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span> <span class=\"token comment\">// 도메인 계층, 상위 계층</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Settle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 하위 계층</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SettleDto</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderStatus</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> orderDate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> orderNo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> price<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 빌더</span>\n    \n    <span class=\"token comment\">// entity -> dto (1)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SettleDto</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Settle</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SettleDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">// dto -> entity (2)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Settle</span> <span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Settle</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p>하위(dto) 계층에서는 상위(entity) 계층을 알 수 있으니 (1) 처럼 팩토리메서드를 사용하고<br>\n상위(entity) 계층에서는 하위(dto) 계층을 알 수 없으니 (2) 처럼 하위 계층에서 빌더로 구현합니다.<br>\n(2) 같은 경우에는 별도의 팩토리클래스를 만들어서 사용하시는 분들도 계신데<br>\n저는 일단 DTO에서 해당 역할을 하게 했습니다.<br>\n팩토리 클래스에서도 빌더를 사용하는것은 똑같을것 같습니다.</p>\n<p>그리고 그 외에 인자가 4개가 넘어가면 클래스로 넘겨서 사용할수 있는지 먼저 체크를 하고<br>\n딱히 묶을수 있는 클래스가 없다고 한다면 빌더를 사용했습니다.</p>\n<h2>결론</h2>\n<p>불변성을 띄며 캐시를 해도 되는가?<br>\nyes -> 정적 팩토리 메서드<br>\nno -> 아래 문항으로</p>\n<p>불필요한 클래스 생성이나 계층의 역전없이 인자를 3개 이하로 줄일수 있는가?<br>\nyes -> 정적 팩토리 메서드<br>\nno -> 빌더</p>\n<p>설명한걸 결론짓기가 매우 난해하네요.<br>\n다른 분들은 어떻게 하고 계신지 궁금합니다.</p>\n"}},"__N_SSG":true}